name: Release

on:
  push:
    paths-ignore:
      - '**.md'
  pull_request:
    paths-ignore:
      - '**.md'
env:
  REMOVE_BUNDLED_BOOST : rm -rf /usr/local/share/boost
  BUILD_DEFAULT_LINUX: |
    cmake -S . -B build -D ARCH="default" -D BUILD_TESTS=ON -D CMAKE_BUILD_TYPE=Release && cmake --build build -j3
  APT_INSTALL_LINUX: 'sudo apt -y install build-essential cmake libboost-all-dev miniupnpc libunbound-dev graphviz doxygen libunwind8-dev pkg-config libssl-dev libzmq3-dev libsodium-dev libhidapi-dev libnorm-dev libusb-1.0-0-dev libpgm-dev libprotobuf-dev protobuf-compiler ccache'
  APT_SET_CONF: |
    echo "Acquire::Retries \"3\";"         | sudo tee -a /etc/apt/apt.conf.d/80-custom
    echo "Acquire::http::Timeout \"120\";" | sudo tee -a /etc/apt/apt.conf.d/80-custom
    echo "Acquire::ftp::Timeout \"120\";"  | sudo tee -a /etc/apt/apt.conf.d/80-custom
  CCACHE_SETTINGS: |
    ccache --max-size=150M
    ccache --set-config=compression=true
jobs:
  build-ubuntu:
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      matrix:
        build: [linux-x86_64, linux-i686, linux-armv8, linux-armv7, linux-armv6, freebsd-x86_64]
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          submodules: recursive
      - name: update apt
        run: sudo apt update & sudo apt-get upgrade -y
      - run: sudo apt update && sudo apt install build-essential cmake pkg-config libssl-dev libzmq3-dev libunbound-dev libsodium-dev libunwind8-dev liblzma-dev libreadline6-dev libldns-dev libexpat1-dev libpgm-dev qttools5-dev-tools libhidapi-dev libusb-1.0-0-dev libprotobuf-dev protobuf-compiler libudev-dev libboost-chrono-dev libboost-date-time-dev libboost-filesystem-dev libboost-locale-dev libboost-program-options-dev libboost-regex-dev libboost-serialization-dev libboost-system-dev libboost-thread-dev python3 ccache doxygen graphviz
      - run: sudo apt-get install -y libgtest-dev gcc-arm-linux-androideabi gcc-aarch64-linux-gnu
      - run: cd /usr/src/gtest && sudo cmake . && sudo make && sudo mv lib/libg* /usr/lib/
      - run: make -j2 release-static-${{ matrix.build }}
  build-windows:
    runs-on: windows-latest
    env:
      CCACHE_TEMPDIR: C:\Users\runneradmin\.ccache-temp
      CCACHE_DIR: C:\Users\runneradmin\.ccache
    defaults:
      run:
        shell: msys2 {0}
    steps:
      - uses: actions/checkout@v1
        with:
          submodules: recursive
      - uses: actions/cache@v2
        with:
          path: C:\Users\runneradmin\.ccache
          key: ccache-${{ runner.os }}-build-${{ github.sha }}
          restore-keys: ccache-${{ runner.os }}-build-
      - uses: eine/setup-msys2@v2
        with:
          update: true
          install: mingw-w64-x86_64-toolchain make mingw-w64-x86_64-cmake mingw-w64-x86_64-ccache mingw-w64-x86_64-boost mingw-w64-x86_64-openssl mingw-w64-x86_64-zeromq mingw-w64-x86_64-libsodium mingw-w64-x86_64-hidapi mingw-w64-x86_64-protobuf-c mingw-w64-x86_64-libusb mingw-w64-x86_64-unbound git
      - name: build
        run: |
          ${{env.CCACHE_SETTINGS}}
          make release-static-win64 -j
  build-macos:
    runs-on: macos-latest
    env:
      CCACHE_TEMPDIR: /tmp/.ccache-temp
    steps:
      - uses: actions/checkout@v1
        with:
          submodules: recursive
      - uses: actions/cache@v2
        with:
          path: /Users/runner/Library/Caches/ccache
          key: ccache-${{ runner.os }}-build-${{ github.sha }}
          restore-keys: ccache-${{ runner.os }}-build-
      - name: install dependencies
        run: HOMEBREW_NO_AUTO_UPDATE=1 brew install boost hidapi openssl zmq libpgm miniupnpc ldns expat libunwind-headers protobuf ccache
      - name: build
        run: |
          ${{env.CCACHE_SETTINGS}}
          make -j3
  libwallet-ubuntu:
    runs-on: ubuntu-latest
    env:
      CCACHE_TEMPDIR: /tmp/.ccache-temp
    steps:
      - uses: actions/checkout@v1
        with:
          submodules: recursive
      - uses: actions/cache@v2
        with:
          path: ~/.ccache
          key: ccache-${{ runner.os }}-libwallet-${{ github.sha }}
          restore-keys: ccache-${{ runner.os }}-libwallet-
      - name: remove bundled boost
        run: ${{env.REMOVE_BUNDLED_BOOST}}
      - name: set apt conf
        run: ${{env.APT_SET_CONF}}
      - name: update apt
        run: sudo apt update
      - name: install monero dependencies
        run: ${{env.APT_INSTALL_LINUX}}
      - name: build
        run: |
          ${{env.CCACHE_SETTINGS}}
          cmake .
          make wallet_api -j3
  test-ubuntu:
    needs: build-ubuntu
    runs-on: ubuntu-latest
    env:
      CCACHE_TEMPDIR: /tmp/.ccache-temp
    steps:
      - uses: actions/checkout@v1
        with:
          submodules: recursive
      - name: ccache
        uses: actions/cache@v2
        with:
          path: ~/.ccache
          key: ccache-${{ runner.os }}-build-ubuntu-latest-${{ github.sha }}
          restore-keys: ccache-${{ runner.os }}-build-ubuntu-latest
      - name: remove bundled boost
        run: ${{env.REMOVE_BUNDLED_BOOST}}
      - name: set apt conf
        run: ${{env.APT_SET_CONF}}
      - name: update apt
        run: sudo apt update
      - name: install monero dependencies
        run: ${{env.APT_INSTALL_LINUX}}
      - name: install Python dependencies
        run: pip install requests psutil monotonic
      - name: tests
        env:
          CTEST_OUTPUT_ON_FAILURE: ON
        run: |
          ${{env.CCACHE_SETTINGS}}
          ${{env.BUILD_DEFAULT_LINUX}}
          cmake --build build --target test
  source-archive:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v1
        with:
          submodules: recursive
      - name: archive
        run: |
          pip install git-archive-all
          export VERSION="itw3-$(git describe)"
          export OUTPUT="$VERSION.tar"
          echo "OUTPUT=$OUTPUT" >> $GITHUB_ENV
          /home/runner/.local/bin/git-archive-all --prefix "$VERSION/" --force-submodules "$OUTPUT"
      - uses: actions/upload-artifact@v2
        with:
          name: ${{ env.OUTPUT }}
          path: /home/runner/work/dappserver/itw3/${{ env.OUTPUT }}